/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as appAppImport } from './routes/(app)/_app'
import { Route as appAppUsersImport } from './routes/(app)/_app.users'
import { Route as appAppHomeImport } from './routes/(app)/_app.home'

// Create Virtual Routes

const appImport = createFileRoute('/(app)')()

// Create/Update Routes

const appRoute = appImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const appAppRoute = appAppImport.update({
  id: '/_app',
  getParentRoute: () => appRoute,
} as any)

const appAppUsersRoute = appAppUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => appAppRoute,
} as any)

const appAppHomeRoute = appAppHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => appAppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_app': {
      id: '/(app)/_app'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appAppImport
      parentRoute: typeof appRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_app/home': {
      id: '/(app)/_app/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof appAppHomeImport
      parentRoute: typeof appAppImport
    }
    '/(app)/_app/users': {
      id: '/(app)/_app/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof appAppUsersImport
      parentRoute: typeof appAppImport
    }
  }
}

// Create and export the route tree

interface appAppRouteChildren {
  appAppHomeRoute: typeof appAppHomeRoute
  appAppUsersRoute: typeof appAppUsersRoute
}

const appAppRouteChildren: appAppRouteChildren = {
  appAppHomeRoute: appAppHomeRoute,
  appAppUsersRoute: appAppUsersRoute,
}

const appAppRouteWithChildren =
  appAppRoute._addFileChildren(appAppRouteChildren)

interface appRouteChildren {
  appAppRoute: typeof appAppRouteWithChildren
}

const appRouteChildren: appRouteChildren = {
  appAppRoute: appAppRouteWithChildren,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof appAppRouteWithChildren
  '/login': typeof authLoginRoute
  '/home': typeof appAppHomeRoute
  '/users': typeof appAppUsersRoute
}

export interface FileRoutesByTo {
  '/': typeof appAppRouteWithChildren
  '/login': typeof authLoginRoute
  '/home': typeof appAppHomeRoute
  '/users': typeof appAppUsersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(app)': typeof appRouteWithChildren
  '/(app)/_app': typeof appAppRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(app)/_app/home': typeof appAppHomeRoute
  '/(app)/_app/users': typeof appAppUsersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/home' | '/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/home' | '/users'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(app)/_app'
    | '/(auth)/login'
    | '/(app)/_app/home'
    | '/(app)/_app/users'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRoute: typeof appRouteWithChildren
  authLoginRoute: typeof authLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRoute: appRouteWithChildren,
  authLoginRoute: authLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)",
        "/(auth)/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(app)": {
      "filePath": "(app)",
      "children": [
        "/(app)/_app"
      ]
    },
    "/(app)/_app": {
      "filePath": "(app)/_app.tsx",
      "parent": "/(app)",
      "children": [
        "/(app)/_app/home",
        "/(app)/_app/users"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(app)/_app/home": {
      "filePath": "(app)/_app.home.tsx",
      "parent": "/(app)/_app"
    },
    "/(app)/_app/users": {
      "filePath": "(app)/_app.users.tsx",
      "parent": "/(app)/_app"
    }
  }
}
ROUTE_MANIFEST_END */
